;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{}, :name automata.core, :imports nil, :requires {q quil.core, quil.core quil.core, rules automata.rules, automata.rules automata.rules, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {draw-cellcord {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 124, :column 7, :end-line 124, :end-column 20, :arglists (quote ([{cell :cell, [x y] :cord, height :height, width :width}]))}, :name automata.core/draw-cellcord, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 20, :method-params ([p__18031]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{cell :cell, [x y] :cord, height :height, width :width}]))}, do-offset {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 77, :column 7, :end-line 77, :end-column 16, :arglists (quote ([wrapper off cord]))}, :name automata.core/do-offset, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 16, :method-params ([wrapper off cord]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([wrapper off cord]))}, build-world {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 10, :column 7, :end-line 10, :end-column 18, :arglists (quote ([x y & {:keys [rand], :or {rand false}}])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(x y {:keys [rand], :or {rand false}})], :arglists ([x y & {:keys [rand], :or {rand false}}]), :arglists-meta (nil)}}, :name automata.core/build-world, :variadic true, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(x y {:keys [rand], :or {rand false}})], :arglists ([x y & {:keys [rand], :or {rand false}}]), :arglists-meta (nil)}, :method-params [(x y {:keys [rand], :or {rand false}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists ([x y & {:keys [rand], :or {rand false}}])}, row->cords {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 26, :column 7, :end-line 26, :end-column 17, :arglists (quote ([in-y size]))}, :name automata.core/row->cords, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 17, :method-params ([in-y size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([in-y size]))}, automata {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 174, :column 14, :end-line 174, :end-column 22, :export true, :arglists (quote ([]))}, :name automata.core/automata, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, gen-rows {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 35, :column 7, :end-line 35, :end-column 15, :arglists (quote ([cnt size]))}, :name automata.core/gen-rows, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 15, :method-params ([cnt size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cnt size]))}, offsets {:name automata.core/offsets, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 67, :column 1, :end-line 67, :end-column 13, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 67, :column 6, :end-line 67, :end-column 13}}, draw-state {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 165, :column 7, :end-line 165, :end-column 17, :arglists (quote ([{:keys [world size color x y], :as state}]))}, :name automata.core/draw-state, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 17, :method-params ([p__18043]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [world size color x y], :as state}]))}, log {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 7, :column 7, :end-line 7, :end-column 10, :arglists (quote ([thing]))}, :name automata.core/log, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 10, :method-params ([thing]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([thing]))}, update-state {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 156, :column 7, :end-line 156, :end-column 19, :arglists (quote ([{:keys [world], :as state}]))}, :name automata.core/update-state, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 19, :method-params ([p__18038]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [world], :as state}]))}, cell->color {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 62, :column 7, :end-line 62, :end-column 18, :arglists (quote ([cell]))}, :name automata.core/cell->color, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 18, :method-params ([cell]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cell]))}, cord->hood-cords {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 81, :column 7, :end-line 81, :end-column 23, :arglists (quote ([offset-coll wrapper cord]))}, :name automata.core/cord->hood-cords, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 23, :method-params ([offset-coll wrapper cord]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists (quote ([offset-coll wrapper cord]))}, row-starts {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 31, :column 7, :end-line 31, :end-column 17, :arglists (quote ([size]))}, :name automata.core/row-starts, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 17, :method-params ([size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([size]))}, get-hood {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 90, :column 7, :end-line 90, :end-column 15, :arglists (quote ([world hood]))}, :name automata.core/get-hood, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 15, :method-params ([world hood]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([world hood]))}, world-y {:name automata.core/world-y, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 21, :column 1, :end-line 21, :end-column 13, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 21, :column 6, :end-line 21, :end-column 13}}, wrap {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 72, :column 7, :end-line 72, :end-column 11, :arglists (quote ([min max x]))}, :name automata.core/wrap, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 11, :method-params ([min max x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 3, :fn-var true, :arglists (quote ([min max x]))}, zip-cells {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 44, :column 7, :end-line 44, :end-column 16, :arglists (quote ([cells size]))}, :name automata.core/zip-cells, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 16, :method-params ([cells size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cells size]))}, step-world {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 151, :column 7, :end-line 151, :end-column 17, :arglists (quote ([world rules]))}, :name automata.core/step-world, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 17, :method-params ([world rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([world rules]))}, -hood->next-cell {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 108, :column 7, :end-line 108, :end-column 23, :arglists (quote ([hood rules]))}, :name automata.core/-hood->next-cell, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 23, :method-params ([hood rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hood rules]))}, sq-size {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 23, :column 7, :end-line 23, :end-column 14, :arglists (quote ([]))}, :name automata.core/sq-size, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, setup {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 137, :column 7, :end-line 137, :end-column 12, :arglists (quote ([]))}, :name automata.core/setup, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, world-x {:name automata.core/world-x, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 20, :column 1, :end-line 20, :end-column 13, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 20, :column 6, :end-line 20, :end-column 13}}, world->hoods {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 93, :column 7, :end-line 93, :end-column 19, :arglists (quote ([world & {:keys [min max wrapper getter], :or {min 0, getter (partial get-hood world), max (dec (count world)), wrapper (memoize (partial wrap min max))}}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(world {:keys [min max wrapper getter], :or {min 0, getter (partial get-hood world), max (dec (count world)), wrapper (memoize (partial wrap min max))}})], :arglists ([world & {:keys [min max wrapper getter], :or {min 0, getter (partial get-hood world), max (dec (count world)), wrapper (memoize (partial wrap min max))}}]), :arglists-meta (nil)}}, :name automata.core/world->hoods, :variadic true, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(world {:keys [min max wrapper getter], :or {min 0, getter (partial get-hood world), max (dec (count world)), wrapper (memoize (partial wrap min max))}})], :arglists ([world & {:keys [min max wrapper getter], :or {min 0, getter (partial get-hood world), max (dec (count world)), wrapper (memoize (partial wrap min max))}}]), :arglists-meta (nil)}, :method-params [(world {:keys [min max wrapper getter], :or {min 0, getter (partial get-hood world), max (dec (count world)), wrapper (memoize (partial wrap min max))}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists ([world & {:keys [min max wrapper getter], :or {min 0, getter (partial get-hood world), max (dec (count world)), wrapper (memoize (partial wrap min max))}}])}, hoods->next-world {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 115, :column 7, :end-line 115, :end-column 24, :arglists (quote ([hoods rules]))}, :name automata.core/hoods->next-world, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 24, :method-params ([hoods rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hoods rules]))}, draw-cellcords {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 132, :column 7, :end-line 132, :end-column 21, :arglists (quote ([cellcords]))}, :name automata.core/draw-cellcords, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :end-column 21, :method-params ([cellcords]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cellcords]))}, hood->next-cell {:name automata.core/hood->next-cell, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 113, :column 1, :end-line 113, :end-column 21, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\core.cljs", :line 113, :column 6, :end-line 113, :end-column 21}}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:y :cord :hsb :min :fn :color :else :rand :green :width :update :size :setup :middleware :world :host :max :getter :host-id :no-start :x :draw :cell :wrapper :height}, :order [:rand :cell :cord :height :width :else :min :max :wrapper :getter :hsb :world :color :size :x :y :green :host :update :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}