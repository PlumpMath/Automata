;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{}, :name automata.rules, :imports nil, :requires nil, :uses nil, :defs {subject {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :line 4, :column 7, :end-line 4, :end-column 14, :arglists (quote ([hood]))}, :name automata.rules/subject, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :end-column 14, :method-params ([hood]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hood]))}, hood-pop {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :line 7, :column 7, :end-line 7, :end-column 15, :arglists (quote ([hood]))}, :name automata.rules/hood-pop, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :end-column 15, :method-params ([hood]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hood]))}, rule-under-pop {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :line 10, :column 7, :end-line 10, :end-column 21, :arglists (quote ([hood]))}, :name automata.rules/rule-under-pop, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :end-column 21, :method-params ([hood]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hood]))}, rule-next-gen {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :line 16, :column 7, :end-line 16, :end-column 20, :arglists (quote ([hood]))}, :name automata.rules/rule-next-gen, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :end-column 20, :method-params ([hood]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hood]))}, rule-over-pop {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :line 23, :column 7, :end-line 23, :end-column 20, :arglists (quote ([hood]))}, :name automata.rules/rule-over-pop, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :end-column 20, :method-params ([hood]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hood]))}, rule-repro {:protocol-inline nil, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :line 29, :column 7, :end-line 29, :end-column 17, :arglists (quote ([hood]))}, :name automata.rules/rule-repro, :variadic false, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :end-column 17, :method-params ([hood]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hood]))}, rules {:name automata.rules/rules, :file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :line 36, :column 1, :end-line 36, :end-column 11, :meta {:file "C:\\Users\\ericf\\Documents\\GitHub\\Automata\\target\\classes\\automata\\rules.cljs", :line 36, :column 6, :end-line 36, :end-column 11}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}